var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = UnionWrappers","category":"page"},{"location":"#UnionWrappers","page":"Home","title":"UnionWrappers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for UnionWrappers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [UnionWrappers]","category":"page"},{"location":"#UnionWrappers.AbstractEltypeWrapper","page":"Home","title":"UnionWrappers.AbstractEltypeWrapper","text":"AbstractEltypeWrapper{E,T} <: AbstractUnionWrapper{T}\n\nWrapper that stores an additional element type as a type parameter. The element type can be queried using eltype(w). There are implementations of wrap_eltype for NTuple and NamedTuple\n\n\n\n\n\n","category":"type"},{"location":"#UnionWrappers.AbstractSizeWrapper","page":"Home","title":"UnionWrappers.AbstractSizeWrapper","text":"AbstractSizeWrapper{D,E,T} <: AbstractEltypeWrapper{E,T}\n\nWrapper that stores an additional sizes of dimensions as a type parameter. The size can be queried by size(w) and the number of elements can be queried using length(w). There are implementations of wrap_size for ComponentArray.\n\n\n\n\n\n","category":"type"},{"location":"#UnionWrappers.AbstractUnionWrapper","page":"Home","title":"UnionWrappers.AbstractUnionWrapper","text":"AbstractUnionWrapper{T}\n\nBasic Wrapper that stores a single type parameter to distinguish different wrapped types for dispatch.  The default wrap_union creates a wrapper for uniontype Any.\n\n\n\n\n\n","category":"type"},{"location":"#UnionWrappers.unwrap-Tuple{UnionWrapper}","page":"Home","title":"UnionWrappers.unwrap","text":"wrap_union(x)\n\nWraps into a AbstractUnionWrapper type to avoid compilation for types with much information in type parameters.\n\nSpecific methods create different Wrappers with a small amount of  information on the type and its properties preserved in type parameters.\n\nThe default produces as UnionWrapper{Val{:Any}()}.\n\nSee unwrap(w) and wrapped_union(w) to extract the original value or the  uniontype of the wrapped object.\n\n\n\n\n\n","category":"method"},{"location":"#UnionWrappers.wrap_eltype","page":"Home","title":"UnionWrappers.wrap_eltype","text":"AbstractEltypeWrapper{E,T} <: AbstractUnionWrapper{T}\n\nWrapper that stores an additional element type as a type parameter. The element type can be queried using eltype(w). There are implementations of wrap_eltype for NTuple and NamedTuple\n\n\n\n\n\n","category":"function"},{"location":"#UnionWrappers.wrap_size","page":"Home","title":"UnionWrappers.wrap_size","text":"AbstractSizeWrapper{D,E,T} <: AbstractEltypeWrapper{E,T}\n\nWrapper that stores an additional sizes of dimensions as a type parameter. The size can be queried by size(w) and the number of elements can be queried using length(w). There are implementations of wrap_size for ComponentArray.\n\n\n\n\n\n","category":"function"},{"location":"#UnionWrappers.wrap_union","page":"Home","title":"UnionWrappers.wrap_union","text":"wrap_union(x)\n\nWraps into a AbstractUnionWrapper type to avoid compilation for types with much information in type parameters.\n\nSpecific methods create different Wrappers with a small amount of  information on the type and its properties preserved in type parameters.\n\nThe default produces as UnionWrapper{Val{:Any}()}.\n\nSee unwrap(w) and wrapped_union(w) to extract the original value or the  uniontype of the wrapped object.\n\n\n\n\n\n","category":"function"},{"location":"#UnionWrappers.wrapped_union-Union{Tuple{AbstractUnionWrapper{T}}, Tuple{T}} where T","page":"Home","title":"UnionWrappers.wrapped_union","text":"wrap_union(x)\n\nWraps into a AbstractUnionWrapper type to avoid compilation for types with much information in type parameters.\n\nSpecific methods create different Wrappers with a small amount of  information on the type and its properties preserved in type parameters.\n\nThe default produces as UnionWrapper{Val{:Any}()}.\n\nSee unwrap(w) and wrapped_union(w) to extract the original value or the  uniontype of the wrapped object.\n\n\n\n\n\n","category":"method"}]
}
